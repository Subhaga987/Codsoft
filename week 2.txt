import pandas as pd

# Load movies dataset
movies = pd.read_csv('movies.csv')  # The dataset should have columns like 'movieId', 'title', and 'genres'
ratings = pd.read_csv('ratings.csv')  # This file contains user ratings
# Split the genres into individual words
movies['genres'] = movies['genres'].str.split('|')

# Fill missing values (if any)
movies = movies.fillna('')
# For simplicity, let's use just genres as content
movies['content'] = movies['genres'].apply(lambda x: ' '.join(x))
from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['content'])  # Transform the content to a matrix
# Create a series that maps movie titles to indices
indices = pd.Series(movies.index, index=movies['title']).drop_duplicates()

def get_recommendations(title, cosine_sim=cosine_sim):
    # Get the index of the movie that matches the title
    idx = indices[title]

    # Get the pairwise similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the indices of the 10 most similar movies
    sim_scores = sim_scores[1:11]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar movies
    return movies['title'].iloc[movie_indices]
recommendations = get_recommendations('The Godfather')
print(recommendations)
# Example: adding director and actors
movies['content'] = movies['genres'].apply(lambda x: ' '.join(x)) + ' ' + movies['director'] + ' ' + movies['actors']




